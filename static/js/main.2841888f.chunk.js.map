{"version":3,"sources":["components/Header.js","components/SearchBox.js","components/DataTable.js","components/SearchResults.js","components/DataArea.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","SearchForm","props","className","htmlFor","name","list","type","placeholder","id","DataTable","this","headings","SearchResults","DataArea","state","users","order","filteredUsers","handleSort","heading","handleSearchChange","event","console","log","fetch","response","json","data","setState","results","gender","email","App","SearchBox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OASeA,E,uKAJR,OAAO,kF,GAHOC,aC8BNC,MA5Bf,SAAoBC,GAClB,OACE,0BAAMC,UAAU,UACd,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,SAAf,qBACA,2BAGEC,KAAK,QACLC,KAAK,SACLC,KAAK,OACLJ,UAAU,eACVK,YAAY,oCACZC,GAAG,UAEL,8BAAUA,GAAG,c,wBCLNC,G,2KARJR,GACL,OACI,4CAAkBS,KAAKC,c,GAJTZ,cCWTa,IC8CAC,E,4MAtDXC,MAAQ,CACJC,MAAO,CAAC,IACRC,MAAO,UACPC,cAAe,CAAC,K,EAGpBN,SAAW,CACP,QAAS,OAAQ,QAAS,QAAS,O,EAGvCO,WAAa,SAAAC,K,EAEbC,mBAAqB,SAAAC,K,2LAGjBC,QAAQC,IAAI,QAQA,gD,SACWC,MADX,iD,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNL,QAAQC,IAAII,GACZjB,KAAKkB,SAAS,CAACb,MAAQY,EAAKE,U,sIAI5B,OACI,oCAEA,yBAAK3B,UAAU,aAEvB,6BAAMQ,KAAKI,MAAMC,MAAM,GAAGe,QAE1B,6BAAMpB,KAAKI,MAAMC,MAAM,GAAGgB,OAId,kBAAC,EAAD,CACApB,SAAUD,KAAKC,SACfI,MAAOL,KAAKI,MAAMG,cAClBC,WAAYR,KAAKQ,mB,GA9CVnB,aCWRiC,MAVf,WACE,OACE,yBAAK9B,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC+B,EAAD,MACA,kBAAC,EAAD,QCAeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.2841888f.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Header extends Component {\r\n    render ()\r\n    {\r\n       return <h1> Welcome to the Employee Directory UK Edition!</h1>\r\n    }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form className=\"search\">\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"breed\">Search Directory:</label>\r\n        <input\r\n        //   value={props.search}\r\n        //   onChange={props.handleInputChange}\r\n          name=\"breed\"\r\n          list=\"breeds\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Type in a name or number to start\"\r\n          id=\"breed\"\r\n        />\r\n        <datalist id=\"breeds\">\r\n          {/* {props.breeds.map(breed => (\r\n            <option value={breed} key={breed} />\r\n          ))} */}\r\n        </datalist>\r\n        {/* <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\"> */}\r\n          {/* Search */}\r\n        {/* </button> */}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import React, { Component } from \"react\";\r\nimport DataArea from \"./DataArea\";\r\nimport API from \"../utils/API\";\r\n\r\nclass DataTable extends Component {\r\n\r\n    render(props) {\r\n      return (\r\n          <p>Yo my name is {this.headings}</p>\r\n      ) \r\n    }\r\n    \r\n}\r\n\r\nexport default DataTable","import React from \"react\";\r\n// import \"./style.css\";\r\n\r\nfunction SearchResults(props) {\r\n  return (\r\n    <ul className=\"list-group search-results\">\r\n      {props.results.map(result => (\r\n        <li key={result} className=\"list-group-item\">\r\n          <img alt=\"face\" src={result} className=\"img-fluid\" />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default SearchResults;","import React, { Component } from \"react\";\r\nimport DataTable from \"./DataTable\";\r\n// import Nav from \"./Nav\";\r\nimport API from \"../utils/API\";\r\nimport SearchResults from \"./SearchResults\";\r\n\r\nclass DataArea extends Component {\r\n    state = {\r\n        users: [{}],\r\n        order: \"descend\",\r\n        filteredUsers: [{}]\r\n    }\r\n\r\n    headings = [\r\n        \"Image\", \"Name\", \"Phone\", \"Email\", \"DOB\"\r\n    ]\r\n\r\n    handleSort = heading => {}\r\n\r\n    handleSearchChange = event => {}\r\n\r\n    async componentDidMount() {\r\n        console.log(\"hola\")\r\n        // API.getUsers().then(results => {\r\n        //     console.log(results);\r\n        //     this.setState({\r\n        //         users:results.data.results,\r\n        //         filteredUsers: results.data.results\r\n        //     });\r\n        // });\r\n        const url = \"https://randomuser.me/api/?results=200&nat=gb\";\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        console.log(data);\r\n        this.setState({users : data.results});\r\n\r\n    }\r\n    render(){\r\n        return (\r\n            <>\r\n            {/* <Nav handleSearchChange={this.handleSearchChange} /> */}\r\n            <div className=\"data-area\">\r\n            \r\n    <div>{this.state.users[0].gender}</div>\r\n    {/* <div>{this.state.users[0].name.first}</div> */}\r\n    <div>{this.state.users[0].email}</div>\r\n    \r\n\r\n                {/* <p>{this.state.users[0]}</p> */}\r\n                <DataTable\r\n                headings={this.headings}\r\n                users={this.state.filteredUsers}\r\n                handleSort={this.handleSort}\r\n                />\r\n            </div>\r\n            </>//???\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default DataArea;","import React from 'react';\n// import logo from './logo.svg';\n// import 'App.css';\nimport Header from \"./components/Header\"\nimport SearchBox from './components/SearchBox';\nimport DataArea from './components/DataArea';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Header />\n     <SearchBox />\n     <DataArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}